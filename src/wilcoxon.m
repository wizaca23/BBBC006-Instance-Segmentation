pkg load imagepkg load statisticsmetrics;clearwarning("off", "all")dir_gt = '/PATH/TO/GT';dir_a = '/PATH/TO/SOURCE/A';dir_b = '/PATH/TO/SOURCE/B';sample_number = 26;sample_size = 300;images = dir(strcat(dir_a,'*.png'));BDEA = [];DiceA = [];F1A = [];BDEB = [];DiceB = [];F1B = [];epsilon = 0.0000001;for k=0:(sample_number-1)  samples = randsample(images, sample_size, replacement=false);  n_files = length(samples);    %Average Border Displacement Error  ABDEA = 0;  ABDEB = 0;  %Average Multi-Class Weighted Dice Loss  ADiceA = 0;  ADiceB = 0;  %Average F1  A_f1A = 0;  A_f1B = 0;    nan_resultsA = 0;  nan_resultsB = 0;    for i=1:n_files    % Obtains the i-th id and the image from it    path_input = samples(i);            %FIRST CLASS    input = double(imread(strcat(dir_a, path_input.name)));    gt = double(imread(strcat(dir_gt, path_input.name)));        input = input/255;    gt = gt/255;        %BDE    BDE = compare_image_boundary_error(input(:,:,3),gt(:,:,3));    ABDEA = ABDEA + BDE;        %WDMC    Local_Dice = dice_multi(input, gt);    if(isnan(Local_Dice))      nan_resultsA = nan_resultsA + 1;    else      ADiceA = ADiceA + Local_Dice;    end        %SCORES    gtA = (gt > 0);    input = (input > 0);    TP_Matrix = input & gtA;    TP = sum(sum(TP_Matrix));    FP_Matrix = (gtA - input) > 0;    FP = sum(sum(FP_Matrix));    FN_Matrix = (input - gtA) > 0;    FN = sum(sum(FN_Matrix));     precision = (TP+epsilon) ./ ((TP+FP) + epsilon);     recall = (TP+epsilon) ./ ((TP+FN) + epsilon);    f1 = 2*((precision .* recall) ./ (precision + recall));    A_f1A = A_f1A + f1;         %SECOND CLASS    input = double(imread(strcat(dir_b, path_input.name)));    input = input/255;        %BDE    BDE = compare_image_boundary_error(input(:,:,3),gt(:,:,3));    ABDEB = ABDEB + BDE;        %WDMC    Local_Dice = dice_multi(input, gt);    if(isnan(Local_Dice))      nan_resultsB = nan_resultsB + 1;    else      ADiceB = ADiceB + Local_Dice;    end        %SCORES    gtB = (gt > 0);    input = (input > 0);    TP_Matrix = input & gtB;    TP = sum(sum(TP_Matrix));    FP_Matrix = (gtB - input) > 0;    FP = sum(sum(FP_Matrix));    FN_Matrix = (input - gtB) > 0;    FN = sum(sum(FN_Matrix));     precision = (TP+epsilon) ./ ((TP+FP) + epsilon);     recall = (TP+epsilon) ./ ((TP+FN) + epsilon);    f1 = 2*((precision .* recall) ./ (precision + recall));    A_f1B = A_f1B + f1;       end    BDEA(end+1) = ABDEA / n_files;  DiceA(end+1) = ADiceA / (n_files-nan_resultsA);  F1A(end+1) = mean(A_f1A ./ n_files);    BDEB(end+1) = ABDEB / n_files;  DiceB(end+1) = ADiceB / (n_files-nan_resultsB);  F1B(end+1) = mean(A_f1B ./ n_files);    endfor [pval, z] = wilcoxon_test(BDEA, BDEB)[pval, z] = wilcoxon_test(DiceA, DiceB)[pval, z] = wilcoxon_test(F1A, F1B)  